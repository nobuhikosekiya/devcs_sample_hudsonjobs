<?xml version='1.0' encoding='UTF-8'?>
<project>
  <description></description>
  <project-properties class="concurrent-hash-map">
    <entry>
      <string>parametersDefinitionProperties</string>
      <copy-write-list-property>
        <originalValue class="hudson.util.CopyOnWriteList">
          <hudson.model.ParametersDefinitionProperty>
            <parameterDefinitions>
              <hudson.model.StringParameterDefinition>
                <name>IDENTITY_DOMAIN</name>
                <description></description>
                <defaultValue>#IDENTITY_DOMAIN#</defaultValue>
              </hudson.model.StringParameterDefinition>
              <hudson.model.StringParameterDefinition>
                <name>OPC_USER</name>
                <description></description>
                <defaultValue>#OPC_USER#</defaultValue>
              </hudson.model.StringParameterDefinition>
              <hudson.model.PasswordParameterDefinition>
                <name>OPC_PASSWORD</name>
                <description></description>
                <defaultValue>HjkjfpDZZ/58OXB6bLyclh+Wm9R09kg6nE8l/7o23qE=</defaultValue>
              </hudson.model.PasswordParameterDefinition>
            </parameterDefinitions>
          </hudson.model.ParametersDefinitionProperty>
        </originalValue>
        <propertyOverridden>false</propertyOverridden>
      </copy-write-list-property>
    </entry>
    <entry>
      <string>builders</string>
      <describable-list-property>
        <originalValue class="hudson.util.DescribableList">
          <hudson.tasks.Shell>
            <command>cat &lt;&lt;EOF &gt; mytext1.txt
hello1
EOF

cat &lt;&lt;EOF &gt; mytext2.txt
hello1
EOF</command>
          </hudson.tasks.Shell>
          <hudson.tasks.Shell>
            <command>USERNAME=$OPC_USER
PASSWORD=$OPC_PASSWORD
ID_DOMAIN=$IDENTITY_DOMAIN
CONTAINER_NAME=testcontainer
FILE_LIST=&quot;mytext1.txt mytext2.txt&quot;

# Get Token
HTTP_CODE=`curl -i -X GET \
     -s -o curl.out -w &apos;%{http_code}&apos; --dump-header header.out \
     -H &quot;X-Storage-User: Storage-${ID_DOMAIN}:${USERNAME}&quot; \
     -H &quot;X-Storage-Pass: ${PASSWORD}&quot; \
     https://${ID_DOMAIN}.storage.oraclecloud.com/auth/v1.0`

if [ &quot;$HTTP_CODE&quot; -ne &quot;200&quot; ]; then
  cat header.out
  exit 1
fi

AUTH_TOKEN=`cat header.out | grep X-Auth-Token | sed -e &quot;s/.*\: //&quot;`

echo &quot;TOKEN IS $AUTH_TOKEN&quot;

# Create Container
HTTP_CODE=`curl -i -X PUT \
     -s -o curl.out -w &apos;%{http_code}&apos; --dump-header header.out \
     -H &quot;X-Auth-Token: $AUTH_TOKEN&quot; \
     https://${ID_DOMAIN}.storage.oraclecloud.com/v1/Storage-${ID_DOMAIN}/${CONTAINER_NAME}`

if [ &quot;$HTTP_CODE&quot; -ne &quot;201&quot; -a &quot;$HTTP_CODE&quot; -ne &quot;202&quot; ]; then
  cat header.out
  exit 1
fi

# Upload file
for FILE in $FILE_LIST
do
  HTTP_CODE=`curl -i -X PUT \
     -s -o curl.out -w &apos;%{http_code}&apos; --dump-header header.out \
     -H &quot;X-Auth-Token: $AUTH_TOKEN&quot; \
     -T &quot;${FILE}&quot; \
     https://${ID_DOMAIN}.storage.oraclecloud.com/v1/Storage-${ID_DOMAIN}/${CONTAINER_NAME}/uploaded-${FILE}`

    if [ &quot;$HTTP_CODE&quot; -ne &quot;201&quot; -a &quot;$HTTP_CODE&quot; -ne &quot;202&quot; ]; then
      cat header.out
      exit 1
    fi
done

# Check uploaded files
HTTP_CODE=`curl -X GET \
     -s -o curl.out -w &apos;%{http_code}&apos; --dump-header header.out \
     -H &quot;X-Auth-Token: $AUTH_TOKEN&quot; \
     https://${ID_DOMAIN}.storage.oraclecloud.com/v1/Storage-${ID_DOMAIN}/${CONTAINER_NAME}`

if [ &quot;$HTTP_CODE&quot; -ne &quot;200&quot; ]; then
  cat header.out
  exit 1
fi
FILE_LIST=`cat curl.out`
    
# download file
for FILE in $FILE_LIST
do
     HTTP_CODE=`curl -X GET \
     -s -w &apos;%{http_code}&apos; --dump-header header.out \
     -H &quot;X-Auth-Token: $AUTH_TOKEN&quot; \
     -o &quot;$FILE&quot; \
     https://${ID_DOMAIN}.storage.oraclecloud.com/v1/Storage-${ID_DOMAIN}/${CONTAINER_NAME}/$FILE`
     
    if [ &quot;$HTTP_CODE&quot; -ne &quot;200&quot; ]; then
      cat header.out
      exit 1
    fi

done
</command>
          </hudson.tasks.Shell>
        </originalValue>
        <propertyOverridden>false</propertyOverridden>
      </describable-list-property>
    </entry>
    <entry>
      <string>hudson-tasks-ArtifactArchiver</string>
      <external-property>
        <originalValue class="hudson.tasks.ArtifactArchiver">
          <artifacts>uploaded*</artifacts>
          <compressionType>GZIP</compressionType>
          <latestOnly>false</latestOnly>
          <autoValidateFileMask>false</autoValidateFileMask>
        </originalValue>
        <propertyOverridden>false</propertyOverridden>
        <modified>false</modified>
      </external-property>
    </entry>
    <entry>
      <string>scm</string>
      <scm-property>
        <originalValue class="hudson.scm.NullSCM"/>
        <propertyOverridden>false</propertyOverridden>
      </scm-property>
    </entry>
  </project-properties>
  <keepDependencies>false</keepDependencies>
  <createdBy>lisa.jones</createdBy>
  <creationTime>1476173948017</creationTime>
  <properties/>
  <cascadingChildrenNames class="java.util.concurrent.CopyOnWriteArraySet"/>
  <cascading-job-properties class="java.util.concurrent.CopyOnWriteArraySet"/>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <concurrentBuild>false</concurrentBuild>
  <cleanWorkspaceRequired>false</cleanWorkspaceRequired>
</project>